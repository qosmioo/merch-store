// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/employee.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v4"
	entity "github.com/qosmioo/merch-store/internal/entity"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface.
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository.
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance.
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// AddToInventory mocks base method.
func (m *MockEmployeeRepository) AddToInventory(employeeID int, itemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToInventory", employeeID, itemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToInventory indicates an expected call of AddToInventory.
func (mr *MockEmployeeRepositoryMockRecorder) AddToInventory(employeeID, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToInventory", reflect.TypeOf((*MockEmployeeRepository)(nil).AddToInventory), employeeID, itemName)
}

// BeginTransaction mocks base method.
func (m *MockEmployeeRepository) BeginTransaction() (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockEmployeeRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockEmployeeRepository)(nil).BeginTransaction))
}

// CreateEmployee mocks base method.
func (m *MockEmployeeRepository) CreateEmployee(employee entity.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockEmployeeRepositoryMockRecorder) CreateEmployee(employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockEmployeeRepository)(nil).CreateEmployee), employee)
}

// GetEmployeeByID mocks base method.
func (m *MockEmployeeRepository) GetEmployeeByID(employeeID int) (entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", employeeID)
	ret0, _ := ret[0].(entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeeByID(employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeeByID), employeeID)
}

// GetEmployeeByIDTx mocks base method.
func (m *MockEmployeeRepository) GetEmployeeByIDTx(tx pgx.Tx, employeeID int) (entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByIDTx", tx, employeeID)
	ret0, _ := ret[0].(entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByIDTx indicates an expected call of GetEmployeeByIDTx.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeeByIDTx(tx, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByIDTx", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeeByIDTx), tx, employeeID)
}

// GetEmployeeByUsername mocks base method.
func (m *MockEmployeeRepository) GetEmployeeByUsername(username string) (entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByUsername", username)
	ret0, _ := ret[0].(entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByUsername indicates an expected call of GetEmployeeByUsername.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeeByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByUsername", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeeByUsername), username)
}

// GetEmployeeCoinHistory mocks base method.
func (m *MockEmployeeRepository) GetEmployeeCoinHistory(employeeID int) (entity.CoinHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeCoinHistory", employeeID)
	ret0, _ := ret[0].(entity.CoinHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeCoinHistory indicates an expected call of GetEmployeeCoinHistory.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeeCoinHistory(employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeCoinHistory", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeeCoinHistory), employeeID)
}

// GetEmployeeIDByUsername mocks base method.
func (m *MockEmployeeRepository) GetEmployeeIDByUsername(username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeIDByUsername", username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeIDByUsername indicates an expected call of GetEmployeeIDByUsername.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeeIDByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeIDByUsername", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeeIDByUsername), username)
}

// GetEmployeeInventory mocks base method.
func (m *MockEmployeeRepository) GetEmployeeInventory(employeeID int) ([]entity.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeInventory", employeeID)
	ret0, _ := ret[0].([]entity.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeInventory indicates an expected call of GetEmployeeInventory.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeeInventory(employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeInventory", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeeInventory), employeeID)
}

// GetMerchPrice mocks base method.
func (m *MockEmployeeRepository) GetMerchPrice(itemName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchPrice", itemName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchPrice indicates an expected call of GetMerchPrice.
func (mr *MockEmployeeRepositoryMockRecorder) GetMerchPrice(itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchPrice", reflect.TypeOf((*MockEmployeeRepository)(nil).GetMerchPrice), itemName)
}

// RecordTransaction mocks base method.
func (m *MockEmployeeRepository) RecordTransaction(fromEmployeeID, toEmployeeID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransaction", fromEmployeeID, toEmployeeID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransaction indicates an expected call of RecordTransaction.
func (mr *MockEmployeeRepositoryMockRecorder) RecordTransaction(fromEmployeeID, toEmployeeID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransaction", reflect.TypeOf((*MockEmployeeRepository)(nil).RecordTransaction), fromEmployeeID, toEmployeeID, amount)
}

// RecordTransactionTx mocks base method.
func (m *MockEmployeeRepository) RecordTransactionTx(tx pgx.Tx, fromEmployeeID, toEmployeeID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransactionTx", tx, fromEmployeeID, toEmployeeID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransactionTx indicates an expected call of RecordTransactionTx.
func (mr *MockEmployeeRepositoryMockRecorder) RecordTransactionTx(tx, fromEmployeeID, toEmployeeID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransactionTx", reflect.TypeOf((*MockEmployeeRepository)(nil).RecordTransactionTx), tx, fromEmployeeID, toEmployeeID, amount)
}

// UpdateEmployeeCoins mocks base method.
func (m *MockEmployeeRepository) UpdateEmployeeCoins(employeeID, newAmount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeCoins", employeeID, newAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployeeCoins indicates an expected call of UpdateEmployeeCoins.
func (mr *MockEmployeeRepositoryMockRecorder) UpdateEmployeeCoins(employeeID, newAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeCoins", reflect.TypeOf((*MockEmployeeRepository)(nil).UpdateEmployeeCoins), employeeID, newAmount)
}

// UpdateEmployeeCoinsTx mocks base method.
func (m *MockEmployeeRepository) UpdateEmployeeCoinsTx(tx pgx.Tx, employeeID, newAmount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeCoinsTx", tx, employeeID, newAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployeeCoinsTx indicates an expected call of UpdateEmployeeCoinsTx.
func (mr *MockEmployeeRepositoryMockRecorder) UpdateEmployeeCoinsTx(tx, employeeID, newAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeCoinsTx", reflect.TypeOf((*MockEmployeeRepository)(nil).UpdateEmployeeCoinsTx), tx, employeeID, newAmount)
}
